datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            String        @id
  username      String?       @unique
  password      String
  email         String        @unique
  createdAt     DateTime      @default(now())
  role          Roles         @default(USER)
  features      String[]
  notifications Notification[]
  timeout Int?
  status String?
  isVerified Boolean @default(false)
  isPremium Boolean @default(false)
  isEarlySupporter Boolean @default(false)
  Profile Profile?
  Whitelist Whitelist? @relation("member")
  auth_system String @default("NORMAL")
  Staff Staff? @relation("staff")
  appointment Appointments?
  Connections Connection[] @relation("connections")
  Tokens Tokens[] @relation("tokens")
  
  @@map("users")
}

model Profile {
  id String @id @default(uuid())
  nickname String?
  avatar String? @default("https://google.com")
  banner String? @default("https://google.com")
  user User @relation(fields: [userid], references: [id])
  userid String @unique
  status String?
  region_city String?
  region_uf String?
  region_country String?
  description String?
  slug String? @unique
  badges Badges[]
  visitor Visitor[] @relation("visitor")
  visitors Visitor[] @relation("visitors")
  followers Follower[] @relation("followers")
  following Follower[] @relation("following")
  Posts Post[]
  medals Medals[]
  youtube String?
  twitch String?
  instagram String?
  
  @@map("profiles")
}

model Post {
  id String @id @default(uuid())
  content String
  published Boolean @default(true)
  author Profile @relation(fields: [authorId], references: [userid])
  Likes Likes[] @relation("likes")
  Comment Comment[] @relation("comments")
  authorId String
  createdAt DateTime @default(now())
}

model Likes {
  id String @id @default(uuid())
  post Post @relation("likes", fields: [postId], references: [id])
  authorId String
  postId String
  createdAt DateTime @default(now())
}

model Comment {
  id String @id @default(uuid())
  post Post @relation("comments", fields: [postId], references: [id])
  postId String
  authorId String
  content String
  createdAt DateTime @default(now())
}

model Tokens {
  id        String @id @default(uuid())
  used      Boolean @default(false)
  type      String
  user_id   String
  user User @relation("tokens", fields: [user_id], references: [id])
  expiresIn Int
  
  @@map("tokens")
}


model Notification {
  id String @id @default(uuid())
  read Boolean @default(false)
  title String?
  content String?
  small String
  user User @relation(fields: [userid], references: [id])
  userid String
  @@map("notifications")
}


model Badges {
  id String @id
  name String
  image String
  user Profile @relation(fields: [userid], references: [userid])
  userid String
  createdAt DateTime @default(now())
  @@map("badge")
}

model Medals {
  id String @id
  name String
  type String
  image String
  afinity String
  user Profile @relation(fields: [userid], references: [userid])
  userid String
  
  @@map("medal")
}

model Visitor {
  id String @id
  visitors Profile @relation("visitors", fields: [visitors_id], references: [userid])
  visitors_id String
  visitor_id String
  visitor Profile @relation("visitor", fields: [visitor_id], references: [userid])
  at DateTime @default(now())
  @@map("visitors")
}


model Follower {
  id String @id
  followers Profile @relation("followers", fields: [followers_id], references: [userid])
  followers_id String
  following_id String
  following Profile @relation("following", fields: [following_id], references: [userid])
  @@map("followers")
}

model Whitelist {
  id String @id
  status String
  staff_id String?
  user_id String @unique
  user User @relation("member", fields: [user_id], references: [id])
  createdAt Int?
  updateAt Int?
  timeout Int? 
  exam Exam[] 
  count Int @default(autoincrement())
  @@map("whitelists")
}

model Staff {
  id String @id @default(cuid())
  user_id String @unique
  user User @relation("staff", fields: [user_id], references: [id])
  Times Time[] @relation("times")
  access_level String @default("minimum")
  appointments Appointments[]
  updated_at String
  @@map("staffs")
}

model Time {
  id String @id
  staff_id String
  Date String
  scheduled Boolean @default(false)
  staff Staff @relation("times", fields: [staff_id], references: [id])
  @@map("times")
}


model Exam {
  id String @id 
  question String
  answer String
  whitelist Whitelist @relation(fields: [whitelist_id], references: [id])
  whitelist_id String
  @@map("exams")
}


model Appointments {
  id String @id @default(cuid())
  staff_id String
  user_id String @unique
  date Int
  status String?
  channelId String?
  name String
  observation String?
  user User @relation(fields: [user_id], references: [id])
  staff Staff @relation(fields: [staff_id], references: [id])
}

model Connection {
  id String @id @default(cuid())
  plataform String
  fallback String
  user_id String 
  user User @relation("connections", fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  @@map("connections")
}


model Update {
  id             String @id @unique
  product        String
  version        String
  download       String
  sha1           String
  rm             String[]
  directory      String
  release        DateTime @default(now())

  @@map("updates")
}

enum Roles {
  USER
  SUPPORT
  MODERATOR
  ADMIN
}